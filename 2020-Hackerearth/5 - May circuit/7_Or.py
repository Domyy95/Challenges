# Problem Statement: https://www.hackerearth.com/challenges/competitive/may-circuits-20/algorithm/or-b3c038d1/
'''
how many distinct numbers can be generated by doing bitwise OR of one or more integers between A and B (inclusive)?
'''

def fldb(A,B):
	shift=0
	while((A>>shift)!=(B>>shift)):
		shift=shift+1
	return shift-1  

def flbtr(B,n):
	for m in range(n-1,-1,-1):
		if((B>>m)%2==1):
			return m
	return -1

def dofast(A,B):
	if(A==B):
		return 1

	n=fldb(A,B)
	m=flbtr(B,n)
	shared_bits=((A >> (n + 1)) << (n + 1))
	case1=A
	case2=shared_bits + (1 << n) + (1 << (m + 1)) - 1
	case_3_lower_bound = A + (1 << n)
	case_3_upper_bound = shared_bits + (1 << (n + 1)) - 1
	if(case2<case_3_lower_bound-1):
		return (case_3_upper_bound - case_3_lower_bound + 1) + (case2 - case1 + 1)
	else:
		return case_3_upper_bound - case1 + 1
		
a=int(input())
b=int(input())
print(dofast(a,b))